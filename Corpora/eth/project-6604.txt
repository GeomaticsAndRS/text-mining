  Transactional Process Management  

While concurrency control and recovery are well understood problems in  conventional databases, this unfortunately is not the case when transactions are grouped into entities with higher level semantics. Such groupings of transactions often appear as transactional processes coordinating composite systems, i.e., collections of heterogeneous, distributed applications. This type of coordination is becoming more and more important in applications such as, for instance, electronic commerce or virtual enterprises, workflow management systems, process support systems, or specialized coordination tools. In these environments, it is of primary importance to be able to provide transactional execution guarantees for processes and identify the acceptable interleavings among concurrent processes. These transactional execution guarantees include correctness even in case of failures (by appropriate alternative executions) and concurrency (when, for instance, different processes try to access shared resources simultaneously). However, as activities are service invocations in arbitrary subsystems, their inverses may not always be available which influences the execution guarantees that can be provided for transactional processes. Atomicity is generalized under the notion of guaranteed termination indicating that always at least one of several possible final states of a process (by alternative executions) can be reached. Additionally, non-compensatable activities also influence the way concurrent processes are scheduled as -with respect to both correct concurrency control and recovery- additional restrictions have to be imposed. On the other hand, one can benefit from non-compensatable activities as they have the semantics of a "quasi commit" of all preceding activities. This is all covered by the correctness criterion Proc-PRED which is derived by applying the unified theory of concurrency control and recovery to transactional processes. Based on this correctness criterion, our goal is to extend the process model in order to encompass cost and availability information to allow a cost-based optimization of process scheduling (e.g., by choosing among corresponding services with different execution costs provided by different systems with diverse availability characteristics). These execution guarantees however require certain database functionality (such as atomicity of local operations, order-preservation and either compensation of operations or the deferment of their commit) of the participating subsystems. However, this functionality is not present in many applications and must be implemented by a coordination agent coupled with the application. Within our prototype system, we have implemented such coordination agents for selected applications such as, for instance, the business management application SAP R/3.